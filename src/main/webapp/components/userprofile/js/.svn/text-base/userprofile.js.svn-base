define(["userprofile/listener/userprofilelistener"], function() {
	Clazz.createPackage("com.components.userprofile.js");

	Clazz.com.components.userprofile.js.userprofile = Clazz.extend(Clazz.WidgetWithTemplate, {
		
		// template URL, used to indicate where to get the template
		templateUrl: commonVariables.contexturl + "components/userprofile/template/userprofile.tmp",
		name : commonVariables.userprofile,
		userProfileListener : null,
		whereToRender : null,
		validation : null,
		userProfile : null,
		hasError : false,
		
		/***
		 * Called in initialization time of this class 
		 *
		 * @globalConfig: global configurations for this class
		 */
		initialize : function(globalConfig) {
			var self = this;
			if (self.userProfileListener === null ) {
				self.userProfileListener = new Clazz.com.components.userprofile.js.listener.userprofilelistener();
			}
			self.registerEvents(self.userProfileListener);
		},
		
		registerEvents : function(userProfileListener) {
			var self = this;
		},
		
		preRender: function(whereToRender, renderFunction){
			var self = this, userdata = {};
			self.userProfileListener.ajaxCall(self.userProfileListener.getRequestHeader('', "getUserData"), function(response) {
				userdata.userlist = response.response;
				renderFunction(userdata, whereToRender);
			});   								 
		}, 
		
		/***
		 * Called after the preRender() and bindUI() completes. 
		 * Override and add any preRender functionality here
		 *
		 * @element: Element as the result of the template + data binding
		 */
		postRender : function(element) {
			var self=this;
			$("#page-leftbar").find('.act').each(function() {
				$(this).removeClass('act');
				$(this).find('span').each(function(){
				if ($(this).hasClass('arrow_open')) {
					$(this).removeClass('arrow_open');
					$(this).addClass('arrow_close');
				}
		
			});
		});
		$("#adminLi").hide();
			if($(window).width()<760 && !($(this).parent().hasClass('hasChild')))	{
				if($('body').hasClass('show-leftbar')) {
				$('body').removeClass('show-leftbar');
				$('.dummy_section').detach();
				}	
			}
		},
		
		alertifyMessage : function(message) {
			var self = this;
			require(["lib/alertify.min"],function(alertify) {
			console.info($("#alertify-logs"));
			if($("#alertify-logs").children().length)
			$("#alertify-logs").empty();
			alertify.error(message);	
			});
			
			},
				
		validation : function() {
			var self = this;
			var userData = commonVariables.api.localVal.getJson("userData");
			var firstnameobj = $("#userfirstname");
			var lastnameobj = $("#userlastname");
			var emailobj = $("#useremail");
			var passwordobj = $("#password");
			var confirmPwdobj = $("#confirmpwd");
			var oldconfirmPwdobj = $("#oldpassword");
			
			if(firstnameobj.val() === '') {
				firstnameobj.addClass('errormessage');
				firstnameobj.focus();
				firstnameobj.attr('placeholder','Enter First Name');
				firstnameobj.bind('keypress', function() {
					$(this).removeClass("errormessage");
					$(this).removeAttr("placeholder");
				});
				self.hasError = true;
			} else if(lastnameobj.val() === '') {
				lastnameobj.addClass('errormessage');
				lastnameobj.focus();
				lastnameobj.attr('placeholder','Enter Last Name');
				lastnameobj.bind('keypress', function() {
					$(this).removeClass("errormessage");
					$(this).removeAttr("placeholder");
				});
				self.hasError = true;
			} else if(emailobj.val() === '') {
					emailobj.addClass('errormessage');
					emailobj.focus();
					emailobj.attr('placeholder','Enter Email');
					emailobj.bind('keypress', function() {
						$(this).removeClass("errormessage");
						$(this).removeAttr("placeholder");
					});
					self.hasError = true;	
			}  else if(passwordobj.val() !== '' && oldconfirmPwdobj.val() === '') {
				oldconfirmPwdobj.addClass('errormessage');
				oldconfirmPwdobj.focus();
				oldconfirmPwdobj.attr('placeholder','Enter Old Password');
				oldconfirmPwdobj.bind('keypress', function() {
					$(this).removeClass("errormessage");
					$(this).removeAttr("placeholder");
				});
				self.hasError = true;
			}else if(oldconfirmPwdobj.val() !== '' && oldconfirmPwdobj.val() !== userData.password) {
				oldconfirmPwdobj.addClass('errormessage');
				oldconfirmPwdobj.focus();
				oldconfirmPwdobj.attr('placeholder','Enter valid Old Password');
				self.alertifyMessage("Invalid Old Password");	
				oldconfirmPwdobj.bind('keypress', function() {
					$(this).removeClass("errormessage");
					$(this).removeAttr("placeholder");
				});
				self.hasError = true;
			}/* else if(passwordobj.val() === '') {
				passwordobj.addClass('errormessage');
				passwordobj.focus();
				passwordobj.attr('placeholder','Enter Password');
				passwordobj.bind('keypress', function() {
					$(this).removeClass("errormessage");
					$(this).removeAttr("placeholder");
				});
				self.hasError = true;
			} else if(confirmPwdobj.val() === '') {
				confirmPwdobj.addClass('errormessage');
				confirmPwdobj.focus();
				confirmPwdobj.attr('placeholder','Enter Confirm Password');
				confirmPwdobj.bind('keypress', function() {
					$(this).removeClass("errormessage");
					$(this).removeAttr("placeholder");
				});
				self.hasError = true;
			}*/  else if(passwordobj.val() !== '' && confirmPwdobj.val() !== '') {
				if(!(passwordobj.val() === confirmPwdobj.val())){
					confirmPwdobj.addClass('errormessage');
					confirmPwdobj.focus();
					//$("#confirmPwdError").html('Password did not Match');
					self.alertifyMessage("Password did not Match");	
					self.hasError = true;
				} else {
					self.hasError = false;
				}
			} else 
				self.hasError = false;
			
			var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
			if(!emailReg.test(emailobj.val()) && self.hasError === false) {
				emailobj.addClass('errormessage');
				emailobj.focus();
				//$("#emailError").html('Invalid Email Address');
				self.alertifyMessage("Invalid Email Address");		
				emailobj.bind('keypress', function() {
					$(this).removeClass("errormessage");
					$(this).removeAttr("placeholder");
				});
				self.hasError = true;
			}	
			
			return self.hasError;
		},

		/***
		 * Bind the action listeners. The bindUI() is called automatically after the render is complete 
		 *
		 */
		bindUI : function(){
			var self=this, height;			
			
			var offset, currentHeight;

			offset = 116;
			currentHeight = $(window).height();

			if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
				switch(currentHeight) {
					case 460:
					case 548: offset = 107; break;
					case 480:
					case 568: offset = 127; break;
					default: offset = 116; break; 
				}
			} 

			tabheight =  $(window).height() - ($(".breadcrumb_div").height() + $(".header_section").height()) - offset;
			$('.create_table_div').css('height',tabheight + 'px'); 
			
			$(window).resize(function() {
				
				offset = 116;
				currentHeight = $(window).height();

				if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
					switch(currentHeight) {
						case 200:
						case 288: offset = 66; break;
						case 220:
						case 308: offset = 86; break;
						case 460:
						case 548: offset = 107; break;
						case 480:
						case 568: offset = 127; break;
						default: offset = 116; break; 
					}
				} 
				
				tabheight =  $(window).height() - ($(".breadcrumb_div").height() + $(".header_section").height()) - offset;
				$('.create_table_div').css('height',tabheight + 'px'); 
			});
			
			$("#cancel_user").click(function(){
				// Keyboard Fix for Mobile Devices
				setTimeout(function(){
					  window.scrollTo(0, 0);
				}, 0);

				commonVariables.navListener.getMyObj('DASHBOARD', function(retVal) {			
					Clazz.navigationController.push(retVal, commonVariables.animation);
				});
			});
			
			var userData = commonVariables.api.localVal.getJson("userData");
			
			var uploader = new qq.FileUploader({
                element: document.getElementById("uploadImage"),
                action: commonVariables.webserviceurl+'users/uploadImage',
				actionType : "userProfile",
				userId :userData.id,
				buttonLabel: "Browse",
				allowedExtensions: ["png","jpg","gif"],
				multiple: false,
				debug: true,
				onComplete: function (id, fileName, result) {
					if(result.response) {
						$("#profilePicture").val(result.response.name+".png");
					} else {
						self.alertifyMessage("Failed to Upload Image");
					}
					$(".qq-upload-list").find('li').remove();
				}
            });
			
			$("#usercreate").click(function() {
				// Keyboard Fix for Mobile Devices
				setTimeout(function(){
					  window.scrollTo(0, 0);
				}, 0);
				
				$("#emailError").html('');
				$("#confirmPwdError").html('');
				var firstnameobj = $("#userfirstname");
				var lastnameobj = $("#userlastname");
				var emailobj = $("#useremail");
				var confirmPwdobj = $("#confirmpwd");
				var profilePicture = $("#profilePicture").val();
				firstName = firstnameobj.val();
				lastName = lastnameobj.val();
				email = emailobj.val();
				password = confirmPwdobj.val();
				if(!self.validation()) {
					var usersRequestBody = {};
					usersRequestBody.firstName = firstName;
					usersRequestBody.lastName = lastName;
					usersRequestBody.emailId = email;
					usersRequestBody.password = password;
					var user = commonVariables.api.localVal.getJson("userData");
					user.firstName = firstName;
					user.lastName = lastName;
					user.emailId = email;
					if(password !== undefined && password !== "") {
						user.password = password;
					}
					if(profilePicture !== undefined && profilePicture !== "") {
						user.profilePicture = profilePicture;
					}
					self.userProfileListener.ajaxCall(self.userProfileListener.getRequestHeader(user, "create"), function(response) {
						self.userProfileListener.ajaxCall(self.userProfileListener.getRequestHeader(user.id,"getProfilePic"),function(response) {
							if(response.response.imageStream) {
								$(".user_icon").attr("src", "data:image/png;base64,"+response.response.imageStream);
								$(".user_icon").css('height','30px');
								$(".user_icon").css('width','30px');
							} else {
								$(".user_icon").attr("src", "themes/images/user_icon.png");
							}
						});
						
						commonVariables.navListener.getMyObj('DASHBOARD', function(retVal) {			
							Clazz.navigationController.push(retVal, commonVariables.animation);
						});
					});
				}	
			});		
						
			
			Clazz.navigationController.jQueryContainer = commonVariables.contentPlaceholder;
		}
		
	});

	return Clazz.com.components.userprofile.js.userprofile;
});